@model Agro_Saffron.Models.ViewModels.ProductIndexViewModel

@{
    ViewData["Title"] = "Our Products";
}

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar Filters -->
        <div class="col-lg-3 col-md-4 mb-4">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Filters</h5>
                </div>
                <div class="card-body">
                    <!-- Search Box -->
                    <form method="get" class="mb-4">
                        <div class="input-group">
                            <input type="text" name="searchString" class="form-control" 
                                   placeholder="Search here..." value="@Model.SearchString">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </form>

                    <!-- Category Filter -->
                    <h6>Categories</h6>
                    <div class="list-group list-group-flush">
                        <a href="@Url.Action("Index", new { searchString = Model.SearchString })" 
                           class="list-group-item list-group-item-action @(!Model.CurrentCategoryId.HasValue ? "active" : "")">
                            All Categories
                        </a>
                        @foreach (var category in Model.Categories)
                        {
                            <a href="@Url.Action("Index", new { categoryId = category.Id, searchString = Model.SearchString })" 
                               class="list-group-item list-group-item-action @(Model.CurrentCategoryId == category.Id ? "active" : "")">
                                @category.Name
                            </a>
                        }
                    </div>

                    <!-- Price Filter -->
                    <h6 class="mt-4">Price Range</h6>
                    <form method="get" class="price-filter">
                        <input type="hidden" name="searchString" value="@Model.SearchString">
                        <input type="hidden" name="categoryId" value="@Model.CurrentCategoryId">
                        <input type="hidden" name="sortOrder" value="@Model.SortOrder">
                        
                        <div class="row g-2">
                            <div class="col">
                                <input type="number" name="minPrice" class="form-control form-control-sm" 
                                       placeholder="Min" value="@Model.MinPrice">
                            </div>
                            <div class="col">
                                <input type="number" name="maxPrice" class="form-control form-control-sm" 
                                       placeholder="Max" value="@Model.MaxPrice">
                            </div>
                            <div class="col-12 mt-2">
                                <button type="submit" class="btn btn-success btn-sm w-100">Apply</button>
                            </div>
                        </div>
                    </form>

                    <!-- Clear Filters -->
                    @if (!string.IsNullOrEmpty(Model.SearchString) || Model.CurrentCategoryId.HasValue || Model.MinPrice.HasValue || Model.MaxPrice.HasValue)
                    {
                        <div class="mt-3">
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary btn-sm w-100">
                                Clear All Filters
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-lg-9 col-md-8">
            <!-- Header with Sort and Results -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2>Our Products</h2>
                    <p class="text-muted mb-0">Showing @((Model.CurrentPage - 1) * Model.PageSize + 1)-@Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems) of @Model.TotalItems products</p>
                </div>
                
                <!-- Sort Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-outline-success dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        Sort: @(Model.SortOrder switch {
                            "name" => "Name A-Z",
                            "name_desc" => "Name Z-A",
                            "price" => "Price: Low to High", 
                            "price_desc" => "Price: High to Low",
                            "newest" => "Newest First",
                            _ => "Name A-Z"
                        })
                    </button>
                    <ul class="dropdown-menu">
                        @foreach (var option in Model.SortOptions)
                        {
                            <li>
                                <a class="dropdown-item @(Model.SortOrder == option ? "active" : "")" 
                                   href="@Url.Action("Index", new { 
                                       searchString = Model.SearchString,
                                       categoryId = Model.CurrentCategoryId,
                                       sortOrder = option,
                                       minPrice = Model.MinPrice,
                                       maxPrice = Model.MaxPrice
                                   })">
                                    @(option switch {
                                        "name" => "Name A-Z",
                                        "name_desc" => "Name Z-A", 
                                        "price" => "Price: Low to High",
                                        "price_desc" => "Price: High to Low",
                                        "newest" => "Newest First",
                                        _ => option
                                    })
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <!-- Products Grid -->
            @if (Model.Products.Any())
            {
                <div class="row g-4">
                    @foreach (var product in Model.Products)
                    {
                        <div class="col-xl-3 col-lg-4 col-md-6">
                            <div class="card product-card h-100">
                                <div class="position-relative">
                                    <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name" 
                                         style="height: 200px; object-fit: cover;">
                                    @if (product.OnSale)
                                    {
                                        <span class="position-absolute top-0 start-0 badge bg-danger m-2">Sale</span>
                                    }
                                    @if (product.IsFeatured)
                                    {
                                        <span class="position-absolute top-0 end-0 badge bg-success m-2">Featured</span>
                                    }
                                </div>
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@product.Name</h5>
                                    <p class="card-text text-muted small flex-grow-1">@product.Description</p>
                                    
                                    <div class="mt-auto">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            @if (product.OnSale)
                                            {
                                                <div>
                                                    <span class="text-danger h5 mb-0">$@product.DiscountedPrice.ToString("F2")</span>
                                                    <small class="text-muted text-decoration-line-through ms-2">$@product.Price.ToString("F2")</small>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="h5 text-success mb-0">$@product.Price.ToString("F2")</span>
                                            }
                                        </div>
                                        
                                        <div class="d-grid gap-2">
                                            <a href="@Url.Action("Details", new { id = product.Id })" 
                                               class="btn btn-outline-success">View Details</a>
                                            <button class="btn btn-success add-to-cart" 
                                                    data-product-id="@product.Id"
                                                    data-product-name="@product.Name">
                                                <i class="fas fa-shopping-cart"></i> Add to Cart
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="Product pagination" class="mt-5">
                        <ul class="pagination justify-content-center">
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" 
                                       href="@Url.Action("Index", new { 
                                           searchString = Model.SearchString,
                                           categoryId = Model.CurrentCategoryId,
                                           sortOrder = Model.SortOrder,
                                           minPrice = Model.MinPrice,
                                           maxPrice = Model.MaxPrice,
                                           page = i
                                       })">@i</a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-seedling fa-3x text-muted mb-3"></i>
                    <h4>No products found</h4>
                    <p class="text-muted">Try adjusting your search or filters</p>
                    <a href="@Url.Action("Index")" class="btn btn-success">Clear Filters</a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Toast Notification Container -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <i class="fas fa-shopping-cart text-success me-2"></i>
            <strong class="me-auto">Shopping Cart</strong>
            <small>Just now</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toast-message">
            Product added to cart!
        </div>
    </div>
</div>

<style>
    .product-card {
        transition: transform 0.2s, box-shadow 0.2s;
        border: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .list-group-item.active {
        background-color: #198754;
        border-color: #198754;
    }

    .price-filter input {
        border: 1px solid #dee2e6;
    }

    /* Toast styles */
    .toast {
        background-color: white;
        border-left: 4px solid #198754;
    }

    .toast.success {
        border-left-color: #198754;
    }

    .toast.error {
        border-left-color: #dc3545;
    }

    .toast.warning {
        border-left-color: #ffc107;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Bootstrap toast
        const toastEl = document.getElementById('liveToast');
        const toast = new bootstrap.Toast(toastEl, { delay: 3000 });

        // Add to cart functionality
        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', function() {
                const productId = this.getAttribute('data-product-id');
                const productName = this.getAttribute('data-product-name');
                const quantity = 1;
                
                // Show loading state
                const originalText = this.innerHTML;
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
                this.disabled = true;

                fetch('/ShoppingCart/AddToCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ productId: productId, quantity: quantity })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update cart count in navbar
                        updateCartCount(data.cartCount);
                        
                        // Show success message
                        showToast(`"${productName}" added to cart!`, 'success');
                    } else {
                        showToast(data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error adding product to cart', 'error');
                })
                .finally(() => {
                    // Restore button state
                    this.innerHTML = originalText;
                    this.disabled = false;
                });
            });
        });

        // Helper function to update cart count
        function updateCartCount(count) {
            const cartCountElements = document.querySelectorAll('.cart-count');
            cartCountElements.forEach(element => {
                element.textContent = count;
            });
        }

        // Helper function to show toast messages
        function showToast(message, type = 'success') {
            const toastMessage = document.getElementById('toast-message');
            const toastEl = document.getElementById('liveToast');
            
            // Set message and type
            toastMessage.textContent = message;
            toastEl.className = 'toast ' + type;
            
            // Show toast
            toast.show();
        }

        // Load initial cart count
        updateCartCountOnLoad();

        // Function to load initial cart count
        function updateCartCountOnLoad() {
            fetch('/ShoppingCart/GetCartCount')
                .then(response => response.json())
                .then(data => {
                    updateCartCount(data.count);
                })
                .catch(error => {
                    console.error('Error fetching cart count:', error);
                });
        }
    });
</script>